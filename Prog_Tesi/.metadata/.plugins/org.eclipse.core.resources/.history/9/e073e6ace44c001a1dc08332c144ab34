package Ispector;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.Arrays;
import java.util.Iterator;

import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;

import ListaEsitiFlussoOrdinativi.*;
import OpWithDB.OpWithDB;

@SpringBootApplication
public class Ispector implements Runnable {
	private String[] s;
	public Ispector(String[] s) {
		this.s=s;
	}
	public void run() {
		for(int i = 0; i < 2 ; i++) {
			RestTemplate restTemplate = new RestTemplate();
			OpWithDB op = new OpWithDB();
			  
			try {
				ResponseEntity<ListaEsitiFlussoOrdinativi>	response2 = restTemplate.exchange("http://localhost:8080/v1/"+s[4]+"/PA/"+s[2]+"/flusso/esitoflusso/"
																							  +"download=false",
																								HttpMethod.GET,
																								setHeaderGETList(),
																								ListaEsitiFlussoOrdinativi.class);
				ListaEsitiFlussoOrdinativi list = response2.getBody();
				Iterator<infoEsiti> flusso = list.getL().iterator();
				int j = 2;
				while(i != 0 /*flusso.hasNext()*/) {
					infoEsiti info  = flusso.next();
					int IDFlussoS = op.GET_IDENTITY("FlussoScaricato");
					op.INSERT("INSERT INTO FlussoScaricato (IDFlussoS, IDEnte, StrutturaIPA, Stato, DataUpload) "
							+ "VALUES ("+IDFlussoS+", "+s[2]+", '"+s[3]+"', 'ACQUISITO', '"+ info.getDataUpload()+"' )");
					System.out.println("INSERT INTO RicevutaServizio (ProgFlusso, StrutturaIPA, Stato, DataUpload, IDEnte ) "
							+ "VALUES ("+info.getProgFlusso()+", '"+s[3]+"', 'ACQUISITO', '"+ info.getDataUpload()+"', "+s[2]+" )");
					op.INSERT("INSERT INTO RicevutaServizio (ProgFlusso, StrutturaIPA, Stato, DataUpload, IDEnte ) "
							+ "VALUES ("+info.getProgFlusso()+", '"+s[3]+"', 'ACQUISITO', '"+ info.getDataUpload()+"', "+s[2]+" )");
					j--;
				}
				System.out.println(response2.getBody().toString());
				
			} catch (RestClientException | IOException e) {e.printStackTrace();}
			
		}
	}
	
	
	public static HttpEntity<String> setHeaderGETDown() throws IOException{
		HttpHeaders headersdf = new HttpHeaders();
		headersdf.setAccept(Arrays.asList(new MediaType("application", "zip")));
		headersdf.set("Host","<siope+>");
		return new HttpEntity<String>(headersdf);
	}
	
	public static HttpEntity<String> setHeaderGETList()throws IOException{
		HttpHeaders headersdf = new HttpHeaders();
		headersdf.setAccept(Arrays.asList(new MediaType(MediaType.APPLICATION_JSON, Charset.defaultCharset())));
		headersdf.set("Host","<siope+>");
		return new HttpEntity<String>(headersdf);
	}
	
	public static void createDownloadedZipFile(ResponseEntity<byte[]> response) throws IOException {
		String s = response.getHeaders().get("Content-Disposition").get(0).split(";")[2]; 
		s = s.substring(s.indexOf('"')+1,s.length()-1);
		File f = new File(s);
		f.createNewFile();
		FileOutputStream fis = new FileOutputStream(f);
		fis.write(response.getBody());
		fis.flush();
		fis.close();
	}
}
