package ReaderXML;

import java.io.*;
import java.util.*;

import org.jdom.*;
import org.jdom.input.*;
import org.jdom.output.*;

import OpWithDB.OpWithDB;



public class ReaderXML {
	
	  public ReaderXML() {}
	  
	  public String[]  getDati(String nameFile){
		  
		  String[] s = new String[2];
		  
		  try {
	    	
		      //Creo un SAXBuilder e con esco costruisco un document
		      SAXBuilder builder = new SAXBuilder();
		      File f = new File(nameFile);
		      Document document = builder.build(f);
		      
		      //Prendo la radice
		      Element root = document.getRootElement();
		     
		      //Estraggo i figli dalla radice
		      List<?>children = root.getChildren();
		      Iterator<?> iterator = children.iterator();
		      
		      //scorro la testata che e' sempre il primo figlio di questo tipo di file xml
		      Element item = (Element)iterator.next();
		      
		      //arrivo al child esercizio
		      item = (Element)iterator.next();
		      s[0]=item.getText();
		      
		      //conto il numero di mandati
		      int i = 0;
		      while(iterator.hasNext()){
		    	item = (Element)iterator.next();
		        i=i+1;
		      }
		      s[1] = String.valueOf(i);
		    }
		  catch (Exception e) {
			  System.err.println("Errore durante la lettura dal file");
			  e.printStackTrace();
		  }
		  return s;
	  }
	  
	  /*public String CreateOPI(String fileName)*/
	 /* public static void main(String[] args) throws JDOMException{
		 System.out.println( CreateOPI("flusso_opi_importato_18517502.xml",11,15));
	  }*/
	public  String IMPORTOPI(String fileName, int nOpi, int IDFlussoC) throws JDOMException {
		for(int j = 0 ; j < nOpi ; j++) {
			  try {
			  
				  //Creo un SAXBuilder e con esso costruisco un document
			      SAXBuilder builder = new SAXBuilder();
			      File f = new File(fileName);
			      Document documentR = builder.build(f);
			      //Creazione dell'oggetto XMLOutputter
			      XMLOutputter outputter = new XMLOutputter();
			      //Imposto il formato dell'outputter come "bel formato"
			      outputter.setFormat(Format.getPrettyFormat());
			      //Produco l'output sul file xml.foo
			      outputter.output(documentR, new FileOutputStream("versione_ordinativo_temp_"+j+".xml"));
			      File OPI = new File("versione_ordinativo_temp_"+j+".xml");
			      Document documentOPI = builder.build(OPI);
			      
			      //Prendo la radice
			      Element root = documentOPI.getRootElement();
			     
			      //Estraggo i figli dalla radice
			      List<?>children = root.getChildren();
			      Iterator<?> iterator = children.iterator();
			      Element item=null;
			      //scorro la testata che e' sempre il primo figlio di questo tipo di file xml
			       item = (Element)iterator.next();
			      //scorro il child esercizio
			      item = (Element)iterator.next();
			
			      int i = 0;
			      HashMap<Integer,Element> listaDaRimuovere = new HashMap<Integer,Element>();
			      
			      while(iterator.hasNext()){
			    	  
			    	item = (Element)iterator.next();
			    	if(j != i) {listaDaRimuovere.put(i,item);}
			        i=i+1;
			       
			       }
			      for(i=0; i <= listaDaRimuovere.size(); i++) {
			    	   if(j != i) {
				    		root.removeContent(listaDaRimuovere.get(i));
				    	}
			      }   
			     "NumOrdinativo" INTEGER NOT NULL DEFAULT AUTOINCREMENT;
			      "IDFlussoC" INTEGER NOT NULL;
			     "StrutturaIPA" CHAR(15) NOT NULL;
			     "Esercizio" INTEGER NOT NULL;
			      "TipoOrdinativi" CHAR(15) NOT NULL;
			      "Stato" CHAR(15) NOT NULL;
			      "Versione" INTEGER NOT NULL;
			      "DataOrdinativo" DATE NOT NULL;
			      "Importo" INTEGER NOT NULL;
			      "SubContenuti" INTEGER NOT NULL;
			      
			      OpWithDB op  = new OPWithDB();
			      outputter.output(documentOPI, new FileOutputStream("versione_ordinativo_temp_"+j+".xml"));
			    }
			    catch (IOException e) {
			      System.err.println("Errore durante il parsing del documento");
			      e.printStackTrace();
			    }
			}
				return "ok";
				
	  }
	
}

